openapi: 3.0.3
info:
  title: Task Management API
  version: 1.0.0
  description: API documentation for the Task Management application.
paths:
  /api/tasks/:
    get:
      operationId: api_tasks_list
      description: |-
        Returns a list of tasks for the authenticated user. You can filter the tasks using the following query parameters:

        - `status`: Filter by task status (e.g., `Pending`, `Completed`).
        - `priority`: Filter by task priority (e.g., `Low`, `Medium`, `High`).

        You can also order tasks using the `ordering` parameter:

        - `ordering=priority` to order by priority.
        - `ordering=due_date` to order by due date.
        - `ordering=status` to order by status.
      summary: Retrieve a list of tasks
      parameters:
      - in: query
        name: ordering
        schema:
          type: string
        description: |-
          Order the results by a field. Supported fields are:
          - `priority`
          - `due_date`
          - `status`
        examples:
          OrderByPriority:
            value: priority
            summary: Order by priority
          OrderByDueDate:
            value: due_date
            summary: Order by due date
          OrderByStatus:
            value: status
            summary: Order by status
      - in: query
        name: priority
        schema:
          type: string
        description: Filter tasks by their priority (Low, Medium, High).
        examples:
          Low:
            value: Low
          Medium:
            value: Medium
          High:
            value: High
      - in: query
        name: status
        schema:
          type: string
        description: Filter tasks by their status (Pending or Completed).
        examples:
          Pending:
            value: Pending
          Completed:
            value: Completed
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
          description: ''
    post:
      operationId: api_tasks_create
      description: Creates a new task for the authenticated user.
      summary: Create a new task
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Task'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Task'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: ''
  /api/tasks/{id}/:
    get:
      operationId: api_tasks_retrieve
      description: Retrieves a task by ID for the authenticated user.
      summary: Retrieve a specific task
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: ''
    put:
      operationId: api_tasks_update
      description: Fully updates a task for the authenticated user.
      summary: Update a task
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Task'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Task'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: ''
    patch:
      operationId: update_task_details
      description: Partially updates a task's details.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTask'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTask'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTask'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: ''
    delete:
      operationId: api_tasks_destroy
      description: Deletes a task for the authenticated user.
      summary: Delete a task
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/tasks/{id}/{status}/:
    patch:
      operationId: update_task_status
      description: Updates the status of a task (mark as complete or incomplete).
      summary: Update task status
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: path
        name: status
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTaskStatusUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTaskStatusUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTaskStatusUpdate'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskStatusUpdate'
          description: ''
  /api/token/:
    post:
      operationId: api_token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/token/refresh/:
    post:
      operationId: api_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/users/:
    get:
      operationId: api_users_list
      description: Returns a list of all users (admin only).
      summary: List all users
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
    post:
      operationId: api_users_create
      description: Creates a new user account.
      summary: Create a user
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/users/{id}/:
    get:
      operationId: api_users_retrieve
      description: Retrieve the details of the authenticated user or an admin.
      summary: Retrieve user details
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: api_users_update
      description: Retrieve, update, or delete user details.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: api_users_partial_update
      description: Partially updates user details (admin or self).
      summary: Update user details
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: api_users_destroy
      description: Deletes a user (admin only).
      summary: Delete a user
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
components:
  schemas:
    PatchedTask:
      type: object
      description: |-
        Serializer for the Task model.
        Includes all fields for CRUD operations and read-only fields for managed attributes.
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
        due_date:
          type: string
          format: date
        priority:
          $ref: '#/components/schemas/PriorityEnum'
        status:
          $ref: '#/components/schemas/TaskStatusEnum'
        completed_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
    PatchedTaskStatusUpdate:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/TaskStatusUpdateStatusEnum'
    PatchedUser:
      type: object
      description: |-
        Serializer for the User model.
        Includes all fields necessary for user management and hashes passwords.
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        password:
          type: string
          writeOnly: true
          maxLength: 128
    PriorityEnum:
      enum:
      - Low
      - Medium
      - High
      type: string
      description: |-
        * `Low` - Low
        * `Medium` - Medium
        * `High` - High
    Task:
      type: object
      description: |-
        Serializer for the Task model.
        Includes all fields for CRUD operations and read-only fields for managed attributes.
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
        due_date:
          type: string
          format: date
        priority:
          $ref: '#/components/schemas/PriorityEnum'
        status:
          $ref: '#/components/schemas/TaskStatusEnum'
        completed_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
      required:
      - completed_at
      - due_date
      - id
      - priority
      - title
    TaskStatusEnum:
      enum:
      - Pending
      - Completed
      type: string
      description: |-
        * `Pending` - Pending
        * `Completed` - Completed
    TaskStatusUpdate:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/TaskStatusUpdateStatusEnum'
      required:
      - status
    TaskStatusUpdateStatusEnum:
      enum:
      - complete
      - incomplete
      type: string
      description: |-
        * `complete` - complete
        * `incomplete` - incomplete
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    User:
      type: object
      description: |-
        Serializer for the User model.
        Includes all fields necessary for user management and hashes passwords.
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        password:
          type: string
          writeOnly: true
          maxLength: 128
      required:
      - id
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
